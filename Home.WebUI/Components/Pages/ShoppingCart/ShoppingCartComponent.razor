@using Home.WebUI.DataAccess.ShoppingCarts.CreateShoppingCart
@using Home.WebUI.DataAccess.ShoppingCarts.GetShoppingCart

@page "/shopping-carts"

@inject IHomeHttpClient ApiAccess

@if (this.m_ShoppingCart != null)
{
		@this.m_ShoppingCart.Name
}

@code {

	#region Fields

	private CancellationTokenHandler m_CancellationTokenHandler = new();
	private ErrorHandler? m_ErrorHandler;
	private GetShoppingCartWebAppResponse? m_ShoppingCart;

	#endregion Fields

	#region Lifecycle Methods

	protected override async Task OnInitializedAsync()
	{
		this.m_ShoppingCart = await this.ApiAccess.SendRequestAsync<object, GetShoppingCartWebAppResponse>(null, ApiProvider.GetShoppingCarts(),
			(e) => this.m_ErrorHandler!.AddError(e), this.m_CancellationTokenHandler.Token);


	}

	#endregion Lifecycle Methods

	#region Methods

	private async Task CreateShoppingCart()
	{
		var _CreateResponse = await this.ApiAccess.SendRequestAsync<CreateShoppingCartWebAppRequest, CreateShoppingCartWebAppResponse>(new CreateShoppingCartWebAppRequest()
		{
			Name = "My Cart"
		}, ApiProvider.CreateShoppingCart(),
			(e) => this.m_ErrorHandler!.AddError(e), this.m_CancellationTokenHandler.Token);
		if (_CreateResponse != null)
			this.m_ShoppingCart = await this.ApiAccess.SendRequestAsync<object, GetShoppingCartWebAppResponse>(null, ApiProvider.GetShoppingCarts(),
				(e) => this.m_ErrorHandler!.AddError(e), this.m_CancellationTokenHandler.Token);
	}

	#endregion Methods

}
