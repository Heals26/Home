// <auto-generated />
using System;
using Home.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Home.Persistence.Migrations
{
    [DbContext(typeof(PersistenceContext))]
    [Migration("20250903093714_InitialCommit")]
    partial class InitialCommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Home.Domain.Entities.Activity", b =>
                {
                    b.Property<long>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActivityID"));

                    b.Property<long?>("ActivityStateID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActivityStatusID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<long>("StateID")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusID")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ActivityID");

                    b.HasIndex("ActivityStateID");

                    b.HasIndex("ActivityStatusID");

                    b.HasIndex("StateID")
                        .IsUnique();

                    b.HasIndex("StatusID")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Activity", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.ActivityContent", b =>
                {
                    b.Property<long>("ActivityContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActivityContentID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FK_ActivityContent_ActivityRegion")
                        .HasColumnType("bigint");

                    b.Property<long>("RegionID")
                        .HasColumnType("bigint");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("ActivityContentID");

                    b.HasIndex("FK_ActivityContent_ActivityRegion");

                    b.ToTable("ActivityContent", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.ActivityRegion", b =>
                {
                    b.Property<long>("ActivityRegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActivityRegionID"));

                    b.Property<long>("ActivityID")
                        .HasColumnType("bigint");

                    b.Property<long>("Region")
                        .HasColumnType("bigint");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("ActivityRegionID");

                    b.HasIndex("ActivityID");

                    b.ToTable("ActivityRegion", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.ActivityState", b =>
                {
                    b.Property<long>("ActivityStateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActivityStateID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ActivityStateID");

                    b.ToTable("ActivityState", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.ActivityStatus", b =>
                {
                    b.Property<long>("ActivityStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActivityStatusID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ActivityStatusID");

                    b.ToTable("ActivityStatus", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.ApiAuditEntry", b =>
                {
                    b.Property<long>("ApiAuditEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ApiAuditEntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ApiAuditEntryID"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("CreatedResourceID")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<short>("HttpResponseStatusCode")
                        .HasColumnType("smallint");

                    b.Property<string>("RemoteIPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestReceivedOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseSentOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("UserID")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ApiAuditEntryID");

                    b.HasIndex("UserID");

                    b.ToTable("ApiAuditEntry", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.Audit", b =>
                {
                    b.Property<long>("AuditID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditID"));

                    b.Property<string>("AuditContent")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("AuditDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditUserName")
                        .HasMaxLength(152)
                        .HasColumnType("nvarchar(152)");

                    b.Property<long>("AuditUserUserID")
                        .HasColumnType("bigint");

                    b.Property<long>("Entity")
                        .HasColumnType("bigint");

                    b.Property<long>("EntityID")
                        .HasColumnType("bigint");

                    b.HasKey("AuditID");

                    b.HasIndex("AuditUserUserID");

                    b.HasIndex("EntityID");

                    b.HasIndex("Entity", "EntityID")
                        .HasDatabaseName("IX_Audit_Entity_EntityID");

                    b.ToTable("Audit", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.Ingredient", b =>
                {
                    b.Property<long>("IngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IngredientID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Volumne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IngredientID");

                    b.ToTable("Ingredient", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.Light", b =>
                {
                    b.Property<long>("LightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LightID"));

                    b.Property<string>("ID")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("LightGroupID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("LightID");

                    b.HasIndex("LightGroupID");

                    b.ToTable("Light");
                });

            modelBuilder.Entity("Home.Domain.Entities.LightGroup", b =>
                {
                    b.Property<long>("LightGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LightGroupID"));

                    b.Property<string>("ID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("LightLocationID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("LightGroupID");

                    b.HasIndex("LightLocationID");

                    b.ToTable("LightGroup");
                });

            modelBuilder.Entity("Home.Domain.Entities.LightLocation", b =>
                {
                    b.Property<long>("LightLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LightLocationID"));

                    b.Property<string>("ID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("LightLocationID");

                    b.ToTable("LightLocation");
                });

            modelBuilder.Entity("Home.Domain.Entities.Note", b =>
                {
                    b.Property<long>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NoteID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 9, 3, 9, 37, 14, 334, DateTimeKind.Utc).AddTicks(8997));

                    b.HasKey("NoteID");

                    b.ToTable("Note", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.Recipe", b =>
                {
                    b.Property<long>("RecipeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecipeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeID");

                    b.ToTable("Recipe", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<long>("IngredientID")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeID")
                        .HasColumnType("bigint");

                    b.HasKey("IngredientID", "RecipeID");

                    b.HasIndex("RecipeID");

                    b.ToTable("RecipeIngredient", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.RecipeNote", b =>
                {
                    b.Property<long>("NoteID")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeID")
                        .HasColumnType("bigint");

                    b.HasKey("NoteID", "RecipeID");

                    b.HasIndex("RecipeID");

                    b.ToTable("RecipeNote", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.RecipeStep", b =>
                {
                    b.Property<long>("RecipeStepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecipeStepID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RecipeID")
                        .HasColumnType("bigint");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("RecipeStepID");

                    b.HasIndex("RecipeID");

                    b.ToTable("RecipeStep", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleNames")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PasswordLastChanged")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID");

                    b.ToTable("User", "home");
                });

            modelBuilder.Entity("Home.Domain.Entities.Activity", b =>
                {
                    b.HasOne("Home.Domain.Entities.ActivityState", null)
                        .WithMany("Activities")
                        .HasForeignKey("ActivityStateID");

                    b.HasOne("Home.Domain.Entities.ActivityStatus", null)
                        .WithMany("Activities")
                        .HasForeignKey("ActivityStatusID");

                    b.HasOne("Home.Domain.Entities.ActivityState", "State")
                        .WithOne()
                        .HasForeignKey("Home.Domain.Entities.Activity", "StateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Activity_State");

                    b.HasOne("Home.Domain.Entities.ActivityStatus", "Status")
                        .WithOne()
                        .HasForeignKey("Home.Domain.Entities.Activity", "StatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Activity_Status");

                    b.HasOne("Home.Domain.Entities.User", "User")
                        .WithMany("AssignedActivities")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Activity_User");

                    b.Navigation("State");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Home.Domain.Entities.ActivityContent", b =>
                {
                    b.HasOne("Home.Domain.Entities.ActivityRegion", "Region")
                        .WithMany("Fields")
                        .HasForeignKey("FK_ActivityContent_ActivityRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActivityContent_ActivityRegion");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Home.Domain.Entities.ActivityRegion", b =>
                {
                    b.HasOne("Home.Domain.Entities.Activity", "Activity")
                        .WithMany("Regions")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActivityRegion_Activity");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Home.Domain.Entities.ApiAuditEntry", b =>
                {
                    b.HasOne("Home.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ApiAuditEntry_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Home.Domain.Entities.Audit", b =>
                {
                    b.HasOne("Home.Domain.Entities.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Home.Domain.Entities.Activity", null)
                        .WithMany("Audits")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_Activity_Audit");

                    b.HasOne("Home.Domain.Entities.Note", null)
                        .WithMany("Audits")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_Note_Audit");

                    b.HasOne("Home.Domain.Entities.Recipe", null)
                        .WithMany("Audits")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_Recipe_Audit");

                    b.HasOne("Home.Domain.Entities.User", null)
                        .WithMany("Audits")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Audit");

                    b.Navigation("AuditUser");
                });

            modelBuilder.Entity("Home.Domain.Entities.Light", b =>
                {
                    b.HasOne("Home.Domain.Entities.LightGroup", "Group")
                        .WithMany("Lights")
                        .HasForeignKey("LightGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Light_Group");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Home.Domain.Entities.LightGroup", b =>
                {
                    b.HasOne("Home.Domain.Entities.LightLocation", "Location")
                        .WithMany("Groups")
                        .HasForeignKey("LightLocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LightGroup_LightLocation");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Home.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("Home.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("Recipes")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecipeIngredient_Ingredient");

                    b.HasOne("Home.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecipeIngredient_Recipe");

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Home.Domain.Entities.RecipeNote", b =>
                {
                    b.HasOne("Home.Domain.Entities.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecipeNote_Note");

                    b.HasOne("Home.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Notes")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecipeNote_Recipe");

                    b.Navigation("Note");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Home.Domain.Entities.RecipeStep", b =>
                {
                    b.HasOne("Home.Domain.Entities.Recipe", null)
                        .WithMany("Steps")
                        .HasForeignKey("RecipeID");
                });

            modelBuilder.Entity("Home.Domain.Entities.Activity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Home.Domain.Entities.ActivityRegion", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Home.Domain.Entities.ActivityState", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Home.Domain.Entities.ActivityStatus", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Home.Domain.Entities.Ingredient", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Home.Domain.Entities.LightGroup", b =>
                {
                    b.Navigation("Lights");
                });

            modelBuilder.Entity("Home.Domain.Entities.LightLocation", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Home.Domain.Entities.Note", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("Home.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Ingredients");

                    b.Navigation("Notes");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Home.Domain.Entities.User", b =>
                {
                    b.Navigation("AssignedActivities");

                    b.Navigation("Audits");
                });
#pragma warning restore 612, 618
        }
    }
}
